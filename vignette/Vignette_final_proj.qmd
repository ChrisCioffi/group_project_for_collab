---
title: 'DATA-413/613 Final Project: Vignette'
author: "Chris Cioffi, Emily Eames, Mimi Beckemeier, Youssouf Barry"
number-sections: true
code-line-numbers: true
format:
  html:
    embed-resources: true
editor: 
  markdown: 
    wrap: 72
---

# Senate Race FEC Helper

## Use Case

This app will be used by U.S. voters hoping to get a better
understanding of whether their candidate is raising money from their own
neighbors and constituents, or if it's donors from out of state seeking
to influence an election. The app can also be used by journalists,
campaign transparency watchdogs or people in foreign countries seeking
to get an easy-to-understand readout of what's happening in Senate
elections in 2026.

##Required Packages

This app requires functionalities from the following packages:

-   shiny
-   tidyverse
-   keyring
-   httr2
-   jsonlite
-   plotly
-   DT

## Data Source and Structure

The Shiny app relies on two main functions to queries the FEC API in
order to obtain donor information about Senate candidates running in
states that have a Senate election in 2026. It gets user input on what
states the user wants more information about a given candidate and then
queries the https://api.open.fec.gov/v1/candidates/totals/ endpoint to
get a list of all candidates in that state.

It then takes that list of candidates and queries the
https://api.open.fec.gov/v1/schedules/schedule_a/by_state/by_candidate/
endpoint to pull down the donor and candidate stats about the
candidates.

```{r}
#| eval: false
fetch_candidate_fundraising <- function(list_candidates) {
  # Set the base URL for the FEC API
  base_url_for_candidate_fundraising <- "https://api.open.fec.gov/v1/schedules/schedule_a/by_state/by_candidate/"
  # Initialize an empty list to store results
  all_data <- list()
  # Iterate through each candidate ID in the dataframe
  for (candidate_id in list_candidates$candidate_id) { # Use the candidate_id column from list_candidates
    # Define query parameters for the current candidate
    params_candidate_fundraising <- list(
      per_page = 100,
      candidate_id = candidate_id,
      cycle = 2026,
      election_full = TRUE,
      sort = "state",
      api_key = keyring::key_get("fec_api_key") # Securely retrieve API key
    )
    # Try to fetch data for the current candidate
    tryCatch(
      {
        state_locations <- (request(base_url_for_candidate_fundraising) |>
                              req_url_query(!!!params_candidate_fundraising) |>
                              req_perform() |>
                              resp_body_json(resp = _))$results |>
          tibble(data = _) |>
          unnest_wider(data)
        # Add a column identifying the candidate
        state_locations$candidate_id <- candidate_id
        # Append to the results list
        all_data[[candidate_id]] <- state_locations
      },
      error = function(e) {
        message(paste("Error fetching data for candidate:", candidate_id))
      }
    )
  }
  # Combine all data into a single dataframe
  final_data <- bind_rows(all_data)
  # make sure the candidate name, party, etc is associated with each line
  final_data <- list_candidates |>
    select(name, candidate_id) |>
    right_join(final_data, by = "candidate_id")
  return(final_data)
}

```

## EDA Inputs, Controls, and Outputs

Both queries return dataframes that include character and number columns
with stats such as the candidate's name, id, their total receipts, the
reciepts from pacs, from indificual donors and their party. The data is
broken down by state and the size of the dataframe depends on how many
states were selected, which then, in-turn changes the number of
candidates.

The users can select states that they want to examine and then will be
provided the dataframes that are auto-generated based on their queries.

![Example of the UI with states selected and the basic candidate stats
auto-generated.](images/Screenshot3.png)

![Example of a map that is rendered after candidates are selected,
giving context to where donations are coming
from.](images/Screenshot4.png)

![Shows data map is created from, providing the deeper dive on candidate
stats and gives context on where donors originate
from.](images/Screenshot2.png)

## Statistical Analysis Inputs, Controls, and Outputs

Users, once they find the states they are interested in, have two ways
to look at the data. They can look at the total funds raised and how
much of that money came from pacs or large donors. And they can also
see, on a map, exactly which states those donations came from.

Future functionality will allow users to see the breakout of where the
money came from for each candidate, but now the heatmap is showing where
donors are seeking to influence the overall race from.

To try and make the graphics most useful. The candidates that have
raised no money are excluded. The dataframe is then recoded, and the
pivot_longer function is used to make the data usable for graphing
purposes.

```{r}
#| eval: false
 df_long <- df |>
      filter(receipts > 1) |> #remove 
      mutate(receipts = (receipts - (individual_itemized_contributions + other_political_committee_contributions))) |>
      pivot_longer(
        cols = c(receipts, individual_itemized_contributions, other_political_committee_contributions),
        names_to = "Type", values_to = "Amount"
      ) |>
      mutate(
        Type = recode(Type,
                      receipts = "Small-dollar donations, transfers, other donations",
                      individual_itemized_contributions = "Donations over $200",
                      other_political_committee_contributions = "PACs"
        ),
        name_party = paste0(name, " (", party, ")")
      )
 
```

![Example of functionality showing what kinds of donors each candidate
is raising money from and its statistical significance with an explainer
on what that means.](images/Screenshot5.png)

We also created a regression analysis with boxplot showing donation by
home state and party. In the future we will provide more documentation
on errors and allow users to select individual candidates to hone in
their analysis.

Sample code of the regression analysis:

```{r}
#| eval: false
  output$model_summary <- renderPrint({
    df <- candidate_fundraising_df()
    req(nrow(df) > 0)
    
    # Create the home_state variable (in_state or out_of_state)
    df <- df |> mutate(candidate_state = substr(candidate_id, 3, 4))  # extract state code from candidate_id
    df <- df |> mutate(home_state = ifelse(state == candidate_state, "in_state", "out_of_state"))
    
    # Ensure 'home_state' and 'party' are factors for regression
    df <- df |> mutate(
      home_state = factor(home_state, levels = c("in_state", "out_of_state")),
      party = factor(party)
    )
    
    # Fit the linear regression model
    model <- lm(total ~ home_state + party, data = df)
    
    # Display the summary of the model (coefficients, p-values, etc.)
    summary(model)
  })
```

## References

1.  Theoretical Foundation for Degressive Proportionality in
    Apportionment Problems Journal of Political Economy link:
    <https://www.jstor.org/stable/10.1086/670380> Summary: This paper
    develops a theoretical framework for degressive proportionality—a
    principle where representation (or resource allocation) increases
    with population size but at a diminishing rate. The authors argue
    that if individual utility functions are concave, utilitarian social
    welfare optimization favors degressive proportionality in collective
    decision-making (e.g., parliamentary seat allocation). The study
    uses mathematical modeling to link individual preferences to
    constitutional rules.

Relevance to Our Project:

-Hypothesis Support: The paper indirectly supports our hypothesis that
donor geography influences candidate priorities. If political attention
(like parliamentary representation) is degressively proportional to
donor concentration, candidates may prioritize areas with dense donor
clusters, even if those areas are out-of-state.

-Methodological Inspiration: The concavity assumption mirrors our
planned analysis of donation patterns. For instance, we might expect
candidates to disproportionately cater to high-donation ZIP codes, even
if those areas represent a small fraction of their electorate.

-Visualization Parallels: The paper’s emphasis on mapping
population-to-representation ratios aligns with our ZIP-level donor
visualizations, which aim to reveal spatial biases in funding sources.

Gaps and Limitations:

-The study focuses on parliamentary apportionment, not campaign finance,
so its direct applicability requires careful translation.

-It does not address dynamic or temporal aspects (e.g., how donation
patterns evolve during an election cycle), which our app will tackle via
the FEC API’s real-time data.

-The theoretical model assumes perfect data transparency, whereas our
project must handle incomplete FEC records (e.g., unitemized donations).

Key Takeaway: This resource provides a conceptual foundation for
analyzing how uneven donor distributions might skew candidate behavior,
reinforcing the need for our app’s transparency tools.

2.  FEC Data and API Best Practices Harvard Dataverse link:
    <https://dash.harvard.edu/entities/publication/a580bb8b-bab5-443c-9c1e-6d3018b31aff>
    Summary: This practical guide reviews challenges and opportunities
    when working with Federal Election Commission (FEC) data, including
    incomplete employer/demographic fields, API rate limits, and
    strategies for aggregating and visualizing donation records. It
    emphasizes the importance of handling "unitemized" donations (small
    contributions not individually reported) and leveraging the FEC’s
    bulk data options for efficiency.

Relevance to Our Project:

-Data Source Guidance: The paper directly addresses our primary data
pipeline (FEC API), offering solutions for common pitfalls (e.g.,
missing employer fields, API pagination).

-Visualization Strategies: It recommends best practices for aggregating
donation records—critical for our ZIP-level maps and bar charts of
itemized vs. unitemized contributions.

-Ethical Considerations: The discussion on data incompleteness informs
our app’s disclaimer about limitations (e.g., untraceable dark money).

Gaps and Limitations:

-The guide does not provide state- or Senate-specific analysis, leaving
room for our app to fill a niche in visualizing statewide races.

-It lacks examples of interactive tools (like Shiny apps), which our
project will deliver.

-Advanced statistical tests (e.g., regressions on donor concentration)
are outside its scope but are part of our proposed features.

Key Takeaway: This resource is a technical roadmap for our data
workflow, ensuring robust API queries and transparent handling of FEC
data limitations. Its gaps highlight opportunities for our app to
innovate in user-friendly, Senate-focused donor visualizations.

Together, these resources ground our project in theory (donor influence
as a degressively proportional problem) and practice (FEC data
challenges). However, they leave unmet needs—such as interactive,
voter-facing tools for Senate races—that our Shiny app will address. By
combining theoretical insights with API-driven transparency, we bridge a
gap in political finance literacy.

## **2.8 Identify Areas of Contribution in the Plan and the Vignette**

```{r}
#| include: false
#Chris Cioffi:  -Project Plan - reviewer, Peer Review - co-contributor, Progress report - reviewer, Shiny App -	primary-contributor, Vignette- primary contributor 
#Emily Eames:  -Project Plan - reviewer, Peer Review - co-contributor, Progress Report - co-contributor, Shiny App -	co-contributor, Vignette- reviewer  
#Mimi Beckemeier - Project Plan - primary contributor, Peer Review - primary contributor, Progress Report- co-contributor, Shiny App - co-contributor, Vignette- reviewer 
#Youssouf Barry:Project plan- co contributor, vignette-literature review, summary and conclusion 
```
